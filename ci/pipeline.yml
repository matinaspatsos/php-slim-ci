resource_types:
  # See https://github.com/telia-oss/github-pr-resource/tree/9ec47e2d9f28d13a4738ff48f2f40d2a570b251a?tab=readme-ov-file#example
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource
  # See https://github.com/dcsg/datetime-version-resource
  - name: datetime-version
    type: registry-image
    source:
      repository: dcsg/datetime-version-resource

resources:
  - name: git-dev-commit
    type: git
    icon: source-branch
    source:
      # Using SSH because a.) this repo can be private and b.) I can write to it
      # See https://concourse-ci.org/tutorial-resources.html#put-steps
      uri: git@github.com:((github-repo)).git
      branch: dev
      private_key: |
        ((github-private-key))
  # See https://github.com/telia-oss/github-pr-resource/tree/9ec47e2d9f28d13a4738ff48f2f40d2a570b251a?tab=readme-ov-file#example
  # See https://www.youtube.com/watch?v=6dbcRfZ94oo
  - name: git-dev-pr
    type: pull-request
    icon: source-pull
    check_every: 2m
    source:
      repository: ((github-repo))
      base_branch: dev
      access_token: ((github-access-token))
  # See https://github.com/concourse/docker-image-resource
  # The "docker-image" resource type does not support arm64, only x86 in AWS
  # You will need to use the resource "docker-image", if you need "registry-image"
  # but it increased by build time from 2m to over 20m
  - name: ecr-app-php-image
    type: docker-image
    icon: docker
    source:
      aws_access_key_id: ((aws-token))
      aws_secret_access_key: ((aws-secret))
      repository: ((php-slim-ecr-repo))
  - name: ecr-ci-task-image
    type: docker-image
    icon: docker
    source:
      aws_access_key_id: ((aws-token))
      aws_secret_access_key: ((aws-secret))
      repository: ((php-slim-ci-ecr-repo))
  # See https://github.com/concourse/semver-resource
  - name: version
    type: semver
    icon: tag
    source:
      driver: s3
      bucket: ((s3-bucket))
      key: ((s3-version-directory))/version
      access_key_id: ((aws-token))
      secret_access_key: ((aws-secret))
      region_name: ((aws-region))
      initial_version: "0.0.0-rc.0"
  # See https://github.com/dcsg/datetime-version-resource
  - name: datetime
    type: datetime-version
    icon: clock-outline
    source:
      timezone: "America/New_York"
      format: "20060102-150405"

jobs:
  #
  # Prereq Jobs
  #
  # See https://ddymko.medium.com/deploy-docker-images-with-concourse-396f7ad23fe2
  - name: build-ci-task-image
    serial_groups:
      - unit-test
    plan:
      - get: git-dev-commit
      - put: ecr-ci-task-image
        params:
          build: git-dev-commit/ci
  #
  # Dev PR Jobs
  #
  - name: start-checks-pr
    plan:
      - get: git-dev-pr
        trigger: true
        version: every
      - put: git-dev-pr
        params:
          path: git-dev-pr
          status: pending
  - name: unit-test-pr
    on_failure:
      put: git-dev-pr
      params:
        path: git-dev-pr
        status: failure
    plan:
      # See https://github.com/telia-oss/github-pr-resource?tab=readme-ov-file#example
      - get: git-dev-pr
        trigger: true
        version: every
        passed:
          - start-checks-pr
      - get: ecr-ci-task-image
      - task: install
        image: ecr-ci-task-image
        config:
          platform: linux
          inputs:
            - name: git-dev-pr
          outputs:
            - name: dependencies
              path: git-dev-pr/vendor
          run:
            path: composer
            args: ["install", "--no-interaction"]
            dir: git-dev-pr
      - task: test
        image: ecr-ci-task-image
        config:
          platform: linux
          inputs:
            - name: git-dev-pr
            - name: dependencies
              path: git-dev-pr/vendor
          run:
            path: composer
            args: ["test"]
            dir: git-dev-pr
  - name: sast-scan-pr
    serial_groups:
      - sast-scan
    on_failure:
      put: git-dev-pr
      params:
        path: git-dev-pr
        status: failure
    plan:
      # See https://github.com/telia-oss/github-pr-resource?tab=readme-ov-file#example
      - get: git-dev-pr
        trigger: true
        version: every
        passed:
          - start-checks-pr
      - task: scan
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: bearer/bearer
          inputs:
            - name: git-dev-pr
              path: /tmp/scan
          run:
            path: bearer
            args: ["scan", "/tmp/scan"]
  - name: build-pr
    serial_groups:
      - unit-test
      - sast-scan
    on_failure:
      put: git-dev-pr
      params:
        path: git-dev-pr
        status: failure
    on_success:
      put: git-dev-pr
      params:
        path: git-dev-pr
        status: success
        comment_file: version-pr/version
    plan:
      # See https://github.com/telia-oss/github-pr-resource?tab=readme-ov-file#example
      - get: git-dev-pr
        trigger: true
        version: every
        passed:
          - unit-test-pr
          - sast-scan-pr
      - put: datetime
      # See https://concourse-ci.org/tutorial-inputs-outputs.html
      - task: version
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              # repository: alpine
              repository: leplusorg/json
          inputs:
            # Writes these from other steps onto the image file system
            - name: git-dev-pr
            - name: datetime
          outputs:
            # This creates a directory that is shared with other steps
            - name: version-pr
          run:
            path: sh
            args:
              - -cx
              - |
                #!/bin/sh
                # Gets datetime from last step
                DATETIME=$(cat datetime/version)

                # Gets PR number from git metadata
                PR=$(jq -r '.pr' git-dev-pr/.git/resource/version.json)

                # Creates version file
                /bin/echo "$DATETIME.pr-$PR" > version-pr/version
                cat version-pr/version
      - put: ecr-app-php-image
        # See https://github.com/concourse/docker-image-resource
        params:
          build: git-dev-pr
          dockerfile: git-dev-pr/docker/Dockerfile
          tag_file: version-pr/version
  #
  # Dev Commit Jobs
  #
  # See https://concourse-ci.org/nodejs-example.html
  - name: unit-test
    # On serial groups: https://concourse-ci.org/jobs.html
    serial_groups:
      - unit-test
    plan:
      - get: git-dev-commit
        trigger: true
      - get: ecr-ci-task-image
        trigger: true
      - task: install
        image: ecr-ci-task-image
        config:
          platform: linux
          inputs:
            - name: git-dev-commit
          outputs:
            - name: dependencies
              path: git-dev-commit/vendor
          run:
            path: composer
            args: ["install", "--no-interaction"]
            dir: git-dev-commit
      - task: test
        image: ecr-ci-task-image
        config:
          platform: linux
          inputs:
            - name: git-dev-commit
            - name: dependencies
              path: git-dev-commit/vendor
          run:
            path: composer
            args: ["test"]
            dir: git-dev-commit
  - name: sast-scan
    # On serial groups: https://concourse-ci.org/jobs.html
    serial_groups:
      - sast-scan
    plan:
      - get: git-dev-commit
        trigger: true
      - task: scan
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: bearer/bearer
          inputs:
            - name: git-dev-commit
              path: /tmp/scan
          run:
            path: bearer
            args: ["scan", "/tmp/scan"]
  - name: build
    serial_groups:
      - unit-test
      - sast-scan
      - build
    # See # See https://ddymko.medium.com/deploy-docker-images-with-concourse-396f7ad23fe2
    plan:
      - get: git-dev-commit
        trigger: true
        passed:
          - unit-test
          - sast-scan
      - get: version
        # See https://github.com/concourse/semver-resource?tab=readme-ov-file#version-bumping-semantics
        params:
          pre: "rc"
      - put: ecr-app-php-image
        # See https://github.com/concourse/docker-image-resource
        params:
          build: git-dev-commit
          dockerfile: git-dev-commit/docker/Dockerfile
          tag_file: version/version
        on_success:
          do:
            - put: version
              params:
                file: version/version
            # See https://concourse-ci.org/basic-git-operations.html#creating-commits-and-tags
            - task: tag
              config:
                platform: linux
                image_resource:
                  type: registry-image
                  source:
                    repository: alpine/git
                inputs:
                  - name: git-dev-commit
                  - name: version
                outputs:
                  - name: git-dev-commit
                run:
                  path: sh
                  args:
                    - -cx
                    - |
                      #!/bin/sh
                      set -e
                      cd git-dev-commit
                      git tag "$(cat ../version/version)"
            # Push tag
            - put: git-dev-commit
              params:
                repository: git-dev-commit
  - name: deploy
    serial_groups:
      - unit-test
      - sast-scan
      - build
    plan:
      - get: version
        trigger: true
        passed:
          - build
      - get: git-dev-commit
      - task: deploy
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: amazon/aws-cli
          inputs:
            # Writes these from other steps onto the image file system
            - name: git-dev-commit
            - name: version
          params:
            APP_NAME: php-slim
            REPOSITORY: ((php-slim-ecr-repo))
            AWS_ACCESS_KEY_ID: ((aws-token))
            AWS_SECRET_ACCESS_KEY: ((aws-secret))
            AWS_REGION: ((aws-region))
            TASK_EXECUTIONER_ROLE: ((task-executioner-role))
          run:
            path: bash
            args:
              - -c
              - |
                #!/bin/bash
                set -e

                tag="$(cat version/version)"
                image="$REPOSITORY:$tag"
                echo $image

                yum install jq -y

                # Configure AWS credentials
                aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                aws configure set default.region $AWS_REGION

                # Write the task definition file
                sed "s|%image%|$image|" git-dev-commit/ci/infra/task-definition.json > task-definition.json
                sed -i "s|%app-name%|$APP_NAME|g" task-definition.json
                sed -i "s|%aws-region%|$AWS_REGION|g" task-definition.json
                sed -i "s|%task-execution-role%|$TASK_EXECUTIONER_ROLE|g" task-definition.json

                # Create task defintion revision
                REVISION_RESPONSE=$(aws ecs register-task-definition --cli-input-json file://./task-definition.json)
                REVISION=$(echo $REVISION_RESPONSE | jq -re '.taskDefinition.taskDefinitionArn')

                # Deploy to service
                cluster=$APP_NAME
                service="$APP_NAME-service"
                aws ecs update-service --cluster $cluster --service $service --task-definition $REVISION > /dev/null
